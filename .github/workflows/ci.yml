name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: deployd_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.stats().ok' || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        database: [sqlite, mysql, mongodb]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install system dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          ca-certificates \
          mysql-client
        
        # Install MongoDB shell (mongosh)
        wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Download Go dependencies
      run: go mod download

    - name: Setup JavaScript sandbox dependencies
      run: |
        cd js-sandbox
        npm ci

    - name: Setup dashboard dependencies
      run: |
        cd dashboard
        npm ci

    - name: Verify Go dependencies
      run: go mod verify

    - name: Run Go linting
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Run Go format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go files are not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run Go vet
      run: go vet ./...

    - name: Create test databases
      run: |
        mkdir -p data
        touch data/test.db

    - name: Wait for services
      run: |
        # Wait for MySQL
        timeout 60s bash -c 'until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptestpass --silent; do sleep 1; done'
        # Wait for MongoDB (no auth required in test mode)
        timeout 60s bash -c 'until mongosh --eval "db.stats().ok" --quiet; do sleep 1; done'

    - name: Run Core Unit Tests with Coverage
      env:
        TEST_DB: ${{ matrix.database }}
        # MySQL configuration
        TEST_MYSQL_HOST: "127.0.0.1"
        TEST_MYSQL_USER: "root"
        TEST_MYSQL_PASSWORD: "testpass"
        # MongoDB configuration  
        TEST_MONGO_URL: "mongodb://127.0.0.1:27017"
      run: |
        mkdir -p coverage
        
        # Run tests with coverage for internal packages
        echo "üß™ Running Go Unit Tests with Coverage for ${{ matrix.database }}..."
        go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./internal/...
        
        # Generate coverage report
        if [ -f coverage/coverage.out ]; then
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html
          TOTAL_COV=$(go tool cover -func=coverage/coverage.out | tail -1 | awk '{print $3}')
          echo "üìä Overall Coverage: $TOTAL_COV"
          
          # Check coverage threshold (aim for 50%+ as requested)
          COVERAGE_NUM=$(echo $TOTAL_COV | sed 's/%//')
          if (( $(echo "$COVERAGE_NUM >= 50.0" | bc -l) )); then
            echo "‚úÖ Coverage threshold met: $TOTAL_COV >= 50%"
          else
            echo "‚ö†Ô∏è  Coverage below target: $TOTAL_COV < 50%"
          fi
        fi

    - name: Run Event System Integration Tests
      env:
        TEST_DB: ${{ matrix.database }}
        # MySQL configuration
        TEST_MYSQL_HOST: "127.0.0.1"
        TEST_MYSQL_USER: "root"
        TEST_MYSQL_PASSWORD: "testpass"
        # MongoDB configuration  
        TEST_MONGO_URL: "mongodb://127.0.0.1:27017"
      run: |
        echo "üîß Running Event System Integration Tests..."
        
        # Run specific integration tests that verify event handlers work
        go test -v -run "TestJavaScriptEventHandlers|TestEventHandlerExecution" ./internal/events/
        
        echo "‚úÖ Event system integration tests completed"

    - name: Run Authentication Integration Tests
      env:
        TEST_DB: ${{ matrix.database }}
        # MySQL configuration
        TEST_MYSQL_HOST: "127.0.0.1"
        TEST_MYSQL_USER: "root"
        TEST_MYSQL_PASSWORD: "testpass"
        # MongoDB configuration  
        TEST_MONGO_URL: "mongodb://127.0.0.1:27017"
      run: |
        echo "üîê Running Authentication Integration Tests..."
        go test -v ./internal/auth/
        echo "‚úÖ Authentication tests completed"

    - name: Run CRUD Operations Tests
      env:
        TEST_DB: ${{ matrix.database }}
        # MySQL configuration
        TEST_MYSQL_HOST: "127.0.0.1"
        TEST_MYSQL_USER: "root"
        TEST_MYSQL_PASSWORD: "testpass"
        # MongoDB configuration  
        TEST_MONGO_URL: "mongodb://127.0.0.1:27017"
      run: |
        echo "üìä Running CRUD Operations Tests..."
        go test -v ./internal/resources/
        echo "‚úÖ CRUD operations tests completed"

    - name: Build Go binaries
      run: |
        echo "üî® Building Go binaries..."
        
        # Build main deployd server
        go build -v -o deployd ./cmd/deployd/
        
        # Build CLI tool
        go build -v -o deployd-cli ./cmd/deployd-cli/
        
        # Verify binaries work
        ./deployd --help
        ./deployd-cli --help
        
        echo "‚úÖ Binaries built successfully"

    - name: Build Dashboard (Frontend)
      run: |
        echo "üé® Building Dashboard Frontend..."
        cd dashboard
        npm run build
        echo "‚úÖ Dashboard built successfully"

    - name: Upload Coverage to Codecov
      if: matrix.database == 'sqlite'  # Only upload once
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload Coverage Report
      if: matrix.database == 'sqlite'  # Only upload once
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

    - name: Upload Test Binaries
      if: matrix.database == 'sqlite'  # Only upload once
      uses: actions/upload-artifact@v4
      with:
        name: test-binaries
        path: |
          deployd
          deployd-cli

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: deployd_e2e
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        go mod download
        cd js-sandbox && npm ci
        cd ../dashboard && npm ci

    - name: Build application
      run: |
        go build -o deployd ./cmd/deployd/
        go build -o deployd-cli ./cmd/deployd-cli/
        cd dashboard && npm run build

    - name: Run E2E Tests
      run: |
        echo "üîÑ Running End-to-End Tests..."
        cd e2e
        chmod +x scripts/run-e2e.sh
        ./scripts/run-e2e.sh
        echo "‚úÖ E2E tests completed"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Performance Benchmarks
      run: |
        echo "‚ö° Running Performance Benchmarks..."
        go test -bench=. -benchmem ./internal/...
        echo "‚úÖ Performance tests completed"

  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build Release Artifacts
      run: |
        echo "üì¶ Building Release Artifacts..."
        
        # Install dependencies
        go mod download
        cd js-sandbox && npm ci && cd ..
        cd dashboard && npm ci && npm run build && cd ..
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/deployd-linux-amd64 ./cmd/deployd/
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/deployd-linux-arm64 ./cmd/deployd/
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/deployd-darwin-amd64 ./cmd/deployd/
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/deployd-darwin-arm64 ./cmd/deployd/
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/deployd-windows-amd64.exe ./cmd/deployd/
        
        # Build CLI
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/deployd-cli-linux-amd64 ./cmd/deployd-cli/
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/deployd-cli-linux-arm64 ./cmd/deployd-cli/
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/deployd-cli-darwin-amd64 ./cmd/deployd-cli/
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/deployd-cli-darwin-arm64 ./cmd/deployd-cli/
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/deployd-cli-windows-amd64.exe ./cmd/deployd-cli/
        
        echo "‚úÖ Release artifacts built successfully"

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: dist/